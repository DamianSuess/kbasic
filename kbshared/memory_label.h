/*
***************************************************************************
Copyright (C) 2000-2008 KBasic Software: www.kbasic.com. All rights reserved.
Source codes are copyrighted by Bernd Noetscher 2000-2008.

You may use this source codes under the terms of the GNU Public License (Version 3)
as published by the Free Software Foundation. 

If you are interested in using the source codes for other licenses or 
commercial development, you must buy commercial licenses from KBasic Software.

This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
***************************************************************************
*/


#ifndef MEMORY_LABEL_H
#define MEMORY_LABEL_H

#include "const.h"
#include "../kbshared/pcode.h"
#include "XIntMap.h"
#include "XIntVector.h"




struct label_used {

  int   nGotoPcodeOffset;
	pcode *pcodeCall;
	int 	nCurrentLine;
	bool 	bGoto;
	t_pcode nPcodeId;

};

struct label {
  // key1
  char acModule[MAX_IDENTIFIER];
	char acSub[MAX_IDENTIFIER];
	char acName[MAX_IDENTIFIER];

  // key2
	int nId;

	bool 	bLabelDeclared; // is this label generated by GOTO or LABEL statement
  int   nPcodeOffset;

  XIntVector *list_label_used; 

};





class memory_label
{
public:
	memory_label				();
	~memory_label			();

	int 		addLabel		(const char *acModule, const char *acSub, const char *acName, int nPcodeOffset = 0);
	bool 		exist				(int nId);
	bool 		exist				(const char *acModule, const char *acSub, const char *acName);
	char   *getModule		(int nId);
	char   *getSub			(int nId);
	char   *getName			(int nId);
	int			getId				(const char *acModule, const char *acSub, const char *acName);

	char   *getModule		();
	char   *getSub			();
	char   *getName			();
	int			getId				();

	bool 		removeLast			();

	bool setPcodeOffset(int nId, int nPcodeOffset);
	int  getPcodeOffset(int nId);

	bool registerCall(int nId, pcode *myPcode, int nGotoPcodeOffset, int nCurrentLine, bool bGoto, t_pcode p);

	bool 		first();
	bool 		next();

	bool 		last();

	bool		firstCall	(int nId, pcode **pcodeCall, int *nGotoPcodeOffset, int *nCurrentLine, bool *bGoto, t_pcode *p);
	bool		nextCall	(int nId, pcode **pcodeCall, int *nGotoPcodeOffset, int *nCurrentLine, bool *bGoto, t_pcode *p);

	char *getKey(const char *acModule, const char *acSub, const char *acName);

private:

  bool memory_labelError(char *acLabelError);

	label *newMemory_label(const char *acModule, const char *acSub, const char *acName, int nPcodeOffset);
	label	*findMemory_label	(int nId);

 
  int key;
  int value;
	XIntMap list_label;
	XIntMap list_label2;
  label* it;

  int nIdCounter;

  label_used *it2;	

};

#endif


